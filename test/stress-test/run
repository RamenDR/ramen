#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import argparse
import json
import os
import subprocess
import sys
import time

PROGRESS = (
    "[%(done)d/%(runs)d] "
    "%(passed)d passed, "
    "%(failed)d failed, "
    "rate: %(rate).1f%%, "
    "time/run: %(time/run).1fs"
)


def main():
    args = parse_args()

    os.mkdir(args.outdir)

    test = {
        "git": git_info(),
        "config": {
            "runs": args.runs,
            "envfile": args.envfile,
            "exit-first": args.exit_first,
            "name-prefix": args.name_prefix,
        },
        "results": [],
        "stats": {
            "runs": args.runs,
            "done": 0,
            "passed": 0,
            "failed": 0,
            "rate": 0.0,
            "time": 0.0,
            "time/run": 0.0,
        },
    }

    update_progress(test["stats"])

    for i in range(args.runs):
        name = f"{i:03d}"
        r = run(name, args)
        test["results"].append(r)
        update_stats(test["stats"], r)
        update_progress(test["stats"])
        if not r["passed"] and args.exit_first:
            break

    update_progress(test["stats"], last=True)
    write_output(test, args.outdir)


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument(
        "-r",
        "--runs",
        type=int,
        default=1,
        help="number of runs (default 1)",
    )
    p.add_argument(
        "-o",
        "--outdir",
        default="out",
        help="directroy for storing test output (default out)",
    )
    p.add_argument(
        "-x",
        "--exit-first",
        action="store_true",
        help="exit on first failure without deleting the clusters",
    )
    p.add_argument(
        "--name-prefix",
        help="prefix profile names",
    )
    p.add_argument(
        "envfile",
        help="path to environment file",
    )
    return p.parse_args()


def update_stats(stats, result):
    stats["done"] += 1
    stats["time"] += result["time"]
    stats["time/run"] = stats["time"] / stats["done"]

    if result["passed"]:
        stats["passed"] += 1
    else:
        stats["failed"] += 1

    stats["rate"] = stats["passed"] / stats["done"] * 100


def update_progress(stats, last=False):
    line = (PROGRESS % stats).ljust(79)
    end = "\n" if last else "\r"
    sys.stdout.write(line + end)


def write_output(test, outdir):
    test_file = os.path.join(outdir, "test.json")
    with open(test_file, "w") as f:
        json.dump(test, f, indent=2)
        f.write("\n")


def run(name, args):
    log = os.path.join(args.outdir, name + ".log")

    start = time.monotonic()
    cp = drenv("start", args.envfile, log, name_prefix=args.name_prefix, verbose=True)
    elapsed = time.monotonic() - start
    passed = cp.returncode == 0

    if not passed:
        drenv(
            "gather",
            args.envfile,
            log,
            name_prefix=args.name_prefix,
            directory=os.path.join(args.outdir, name + ".gather"),
        )

    if passed or not args.exit_first:
        drenv(
            "delete",
            args.envfile,
            log,
            name_prefix=args.name_prefix,
            verbose=True,
            check=True,
        )

    return {
        "name": name,
        "passed": passed,
        "time": elapsed,
    }


def drenv(
    command,
    envfile,
    log,
    name_prefix=None,
    directory=None,
    verbose=False,
    check=False,
):
    cmd = ["drenv", command]
    if name_prefix:
        cmd.extend(("--name-prefix", name_prefix))
    if directory:
        cmd.extend(("--directory", directory))
    if verbose:
        cmd.append("--verbose")
    cmd.append(envfile)
    with open(log, "a") as f:
        return subprocess.run(cmd, stderr=f, check=check)


def git_info():
    return {
        "commit": git("rev-parse", "HEAD"),
        "branch": git("rev-parse", "--abbrev-ref", "HEAD"),
    }


def git(*args):
    cmd = ["git", *args]
    return subprocess.check_output(cmd).decode().strip()


if __name__ == "__main__":
    main()
