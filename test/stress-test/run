#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import argparse
import json
import logging
import os
import subprocess
import sys
import time


def main():
    args = parse_args()

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s %(message)s",
    )

    logging.info("Writing output to %s", args.outdir)
    os.mkdir(args.outdir)

    results = []
    stats = {
        "runs": 0,
        "passed": 0,
        "failed": 0,
        "success": 0.0,
        "time": 0.0,
        "passed-time": 0.0,
        "failed-time": 0.0,
    }

    start = time.monotonic()

    for i in range(args.runs):
        name = f"{i:03d}"
        logging.info("[%s] Started", name)
        r = run(name, args)
        logging.info(
            "[%s] %s in %.1f seconds",
            name,
            "PASSED" if r["passed"] else "FAILED",
            r["time"],
        )
        results.append(r)

        stats["runs"] += 1

        if r["passed"]:
            stats["passed"] += 1
            stats["passed-time"] += r["time"]
        else:
            stats["failed"] += 1
            stats["failed-time"] += r["time"]

        if not r["passed"] and args.exit_first:
            break

    stats["time"] = time.monotonic() - start
    stats["success"] = stats["passed"] / stats["runs"] * 100

    logging.info(
        "%d passed, %d failed (%.1f%%) in %.1fs",
        stats["passed"],
        stats["failed"],
        stats["success"],
        stats["time"],
    )

    write_output(args, results, stats)


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument(
        "-r",
        "--runs",
        type=int,
        default=1,
        help="number of runs (default 1)",
    )
    p.add_argument(
        "-o",
        "--outdir",
        default="out",
        help="directroy for storing test output (default out)",
    )
    p.add_argument(
        "-x",
        "--exit-first",
        action="store_true",
        help="exit on first failure without deleting the clusters",
    )
    p.add_argument(
        "--name-prefix",
        help="prefix profile names",
    )
    p.add_argument(
        "envfile",
        help="path to environment file",
    )
    return p.parse_args()


def write_output(args, results, stats):
    test = {
        "config": {
            "runs": args.runs,
            "envfile": args.envfile,
            "exit-first": args.exit_first,
            "name-prefix": args.name_prefix,
        },
        "results": results,
        "stats": stats,
    }

    test_file = os.path.join(args.outdir, "test.json")
    with open(test_file, "w") as f:
        json.dump(test, f, indent=2)
        f.write("\n")


def run(name, args):
    log = os.path.join(args.outdir, name + ".log")

    start = time.monotonic()
    cp = drenv("start", args.envfile, log, name_prefix=args.name_prefix)
    elapsed = time.monotonic() - start
    passed = cp.returncode == 0

    if passed or not args.exit_first:
        drenv("delete", args.envfile, log, name_prefix=args.name_prefix, check=True)

    return {
        "name": name,
        "passed": passed,
        "time": elapsed,
    }


def drenv(command, envfile, log, name_prefix=None, check=False):
    cmd = ["drenv", command, "--verbose"]
    if name_prefix:
        cmd.extend(("--name-prefix", name_prefix))
    cmd.append(envfile)
    with open(log, "a") as f:
        return subprocess.run(cmd, stderr=f, check=check)


if __name__ == "__main__":
    main()
