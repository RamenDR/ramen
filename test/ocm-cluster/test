#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import sys

import drenv


def deploy_work(cluster, hub, work):
    drenv.log_progress(f"Applying manifestwork to namespace {cluster}")
    drenv.kubectl("apply", "--filename", "-", input=work, profile=hub)


def wait_for_work(cluster, hub):
    drenv.log_progress(
        f"Waiting until manifestwork is applied in namespace {cluster}"
    )
    drenv.kubectl(
        "wait", "manifestwork/example-manifestwork",
        "--for", "condition=applied",
        "--namespace", cluster,
        "--timeout", "60s",
        profile=hub,
    )


def wait_for_deployment(cluster, hub):
    drenv.log_progress(
        f"Waiting until manifestwork is available in namespace {cluster}"
    )
    drenv.kubectl(
        "wait", "manifestwork/example-manifestwork",
        "--for", "condition=available",
        "--namespace", cluster,
        "--timeout", "60s",
        profile=hub,
    )

    drenv.log_progress(
        f"Waiting until deployment is available in cluster {cluster}"
    )
    drenv.kubectl(
        "wait", "deploy/example-deployment",
        "--for", "condition=available",
        "--timeout", "60s",
        profile=cluster,
    )


def delete_work(cluster, hub, work):
    drenv.log_progress(F"Deleting manifestwork from namespace {cluster}")
    drenv.kubectl("delete", "--filename", "-", input=work, profile=hub)


def wait_for_delete_work(cluster, hub):
    drenv.log_progress(
        f"Waiting until manifestwork is deleted from namspace {cluster}"
    )
    drenv.kubectl(
        "wait", "manifestwork/example-manifestwork",
        "--for", "delete",
        "--namespace", cluster,
        "--timeout", "60s",
        profile=hub,
    )


def wait_for_delete_deployment(cluster):
    drenv.log_progress(
        f"Waiting until deployment is deleted from cluster {cluster}"
    )
    drenv.kubectl(
        "wait", "deploy/example-deployment",
        "--for", "delete",
        "--timeout", "60s",
        profile=cluster,
    )


if len(sys.argv) != 3:
    print(f"Usage: {sys.argv[0]} cluster hub")
    sys.exit(1)

cluster = sys.argv[1]
hub = sys.argv[2]

template = drenv.template("ocm-cluster/example-manifestwork.yaml")
work = template.substitute(namespace=cluster)

deploy_work(cluster, hub, work)
wait_for_work(cluster, hub)
wait_for_deployment(cluster, hub)

delete_work(cluster, hub, work)
wait_for_delete_work(cluster, hub)
wait_for_delete_deployment(cluster)
