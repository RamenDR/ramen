#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import json
import sys

import drenv
from drenv import clusteradm
from drenv import kubectl

ADDONS = (
    {
        "name": "application-manager",
        "deployment": "application-manager",
    },
    {
        "name": "governance-policy-framework",
        "deployment": "governance-policy-framework",
    },
    {
        "name": "config-policy-controller",
        "deployment": "config-policy-controller",
    },
)

ADDONS_NAMESPACE = "open-cluster-management-agent-addon"
HUB_NAMESPACE = "open-cluster-management-hub"

# These are deployed when running "clusteradm init" on the hub.
# We wait for them before we try to join the hub.
HUB_DEPLOYMENTS = (
    "cluster-manager-placement-controller",
    "cluster-manager-registration-controller",
    "cluster-manager-registration-webhook",
    "cluster-manager-work-webhook",
)


def deploy(cluster, hub):
    wait_for_hub(hub)
    join_cluster(cluster, hub)
    accept_cluster(cluster, hub)
    enable_addons(cluster, hub)


def wait(cluster):
    print("Waiting until deployments are rolled out")
    for addon in ADDONS:
        deployment = f"deploy/{addon['deployment']}"
        drenv.wait_for(deployment, namespace=ADDONS_NAMESPACE, profile=cluster)
        kubectl.rollout(
            "status",
            deployment,
            f"--namespace={ADDONS_NAMESPACE}",
            "--timeout=300s",
            context=cluster,
        )


def wait_for_hub(hub):
    print(f"Waiting until cluster {hub} is ready")

    drenv.wait_for_cluster(hub)
    drenv.wait_for(f"namespace/{HUB_NAMESPACE}", profile=hub)

    for name in HUB_DEPLOYMENTS:
        deployment = f"deploy/{name}"
        drenv.wait_for(deployment, namespace=HUB_NAMESPACE, profile=hub)
        kubectl.rollout(
            "status",
            deployment,
            f"--namespace={HUB_NAMESPACE}",
            "--timeout=300s",
            context=hub,
        )


def join_cluster(cluster, hub):
    print(f"Joining to cluster {hub}")

    out = clusteradm.get("token", output="json", context=hub)
    hub_info = json.loads(out)

    clusteradm.join(
        hub_token=hub_info["hub-token"],
        hub_apiserver=hub_info["hub-apiserver"],
        cluster_name=cluster,
        wait=True,
        context=cluster,
    )


def accept_cluster(cluster, hub):
    print("Accepting cluster")
    clusteradm.accept([cluster], wait=True, context=hub)


def enable_addons(cluster, hub):
    print("Enabling addons")
    names = [addon["name"] for addon in ADDONS]
    clusteradm.addon("enable", names=names, clusters=[cluster], context=hub)


if len(sys.argv) != 3:
    print(f"Usage: {sys.argv[0]} cluster hub")
    sys.exit(1)

cluster = sys.argv[1]
hub = sys.argv[2]

deploy(cluster, hub)
wait(cluster)
