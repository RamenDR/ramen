#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import json

import drenv
from drenv import kubectl
from drenv import test

test.start("relocate", __file__)
test.add_argument(
    "--cluster",
    help="Cluster name to relocate to (default first cluster).",
)
args = test.parse_args()
config = test.config

cluster = args.cluster or test.env["clusters"][0]
test.info("Relocate to cluster '%s'", cluster)

test.info("Waiting until peer is ready")
kubectl.wait(
    f"drpc/{config['name']}",
    "--for=condition=PeerReady",
    f"--namespace={config['namespace']}",
    "--timeout=300s",
    context=config["hub"],
    log=test.debug,
)

test.info("Waiting until application is replicated")
drenv.wait_for(
    f"drpc/{config['name']}",
    output="jsonpath={.status.lastGroupSyncTime}",
    namespace=config["namespace"],
    timeout=300,
    profile=config["hub"],
    log=test.debug,
)

test.info("Starting relocate")
patch = {"spec": {"action": "Relocate", "preferredCluster": cluster}}
kubectl.patch(
    f"drpc/{config['name']}",
    "--patch",
    json.dumps(patch),
    "--type=merge",
    f"--namespace={config['namespace']}",
    context=config["hub"],
    log=test.debug,
)

test.info("Waiting until application is relocated...")
kubectl.wait(
    f"drpc/{config['name']}",
    "--for=jsonpath={.status.phase}=Relocated",
    f"--namespace={config['namespace']}",
    "--timeout=300s",
    context=config["hub"],
    log=test.debug,
)

# NOTE: Deleting the application get stuck if we don't wait until the cleanup
# after relocate complete before we delete the app.
test.info("Waiting until relocation completes...")
kubectl.wait(
    f"drpc/{config['name']}",
    "--for=jsonpath={.status.progression}=Completed",
    f"--namespace={config['namespace']}",
    "--timeout=300s",
    context=config["hub"],
    log=test.debug,
)

test.info("Application was relocated to cluster %s successfully", cluster)
