#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import json

import drenv
from drenv import kubectl
from drenv import test

test.start("failover", __file__)
args = test.parse_args()
config = test.config

old_cluster = kubectl.get(
    f"placementrule/{config['placement']}",
    f"--namespace={config['namespace']}",
    "--output=jsonpath={.status.decisions[0].clusterName}",
    context=test.env["hub"],
)
if old_cluster == test.env["clusters"][0]:
    new_cluster = test.env["clusters"][1]
else:
    new_cluster = test.env["clusters"][0]

test.info(
    "Failing over application '%s' from cluster '%s' to cluster '%s'",
    config["namespace"],
    old_cluster,
    new_cluster,
)

test.info("Waiting until '%s' application is replicated", config["namespace"])
drenv.wait_for(
    f"drpc/{config['drpc']}",
    output="jsonpath={.status.lastGroupSyncTime}",
    namespace=config["namespace"],
    timeout=300,
    profile=test.env["hub"],
    log=test.debug,
)

test.info("Starting failover")
patch = {"spec": {"action": "Failover", "failoverCluster": new_cluster}}
kubectl.patch(
    f"drpc/{config['drpc']}",
    "--patch",
    json.dumps(patch),
    "--type=merge",
    f"--namespace={config['namespace']}",
    context=test.env["hub"],
    log=test.debug,
)

test.info("Waiting until '%s' application is failed over...", config["namespace"])
kubectl.wait(
    f"drpc/{config['drpc']}",
    "--for=jsonpath={.status.phase}=FailedOver",
    f"--namespace={config['namespace']}",
    "--timeout=300s",
    context=test.env["hub"],
    log=test.debug,
)

test.info("Waiting until '%s' application is replicated", config["namespace"])
drenv.wait_for(
    f"drpc/{config['drpc']}",
    output="jsonpath={.status.lastGroupSyncTime}",
    namespace=config["namespace"],
    timeout=300,
    profile=test.env["hub"],
    log=test.debug,
)

test.info(
    "Application '%s' was failed over to cluster %s successfully",
    config["namespace"],
    new_cluster,
)
