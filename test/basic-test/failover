#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import json

import drenv
from drenv import kubectl
from drenv import test

test.start("failover", __file__)
test.add_argument("cluster", help="Cluster name to failover to.")
args = test.parse_args()
config = test.config

test.info("Waiting until application is replicated")
drenv.wait_for(
    f"drpc/{config['name']}",
    output="jsonpath={.status.lastGroupSyncTime}",
    namespace=config["namespace"],
    timeout=300,
    profile=config["hub"],
    log=test.debug,
)

test.info("Starting failover")
patch = {"spec": {"action": "Failover", "failoverCluster": args.cluster}}
kubectl.patch(
    f"drpc/{config['name']}",
    "--patch",
    json.dumps(patch),
    "--type=merge",
    f"--namespace={config['namespace']}",
    context=config["hub"],
    log=test.debug,
)

test.info("Waiting until application is failed over...")
kubectl.wait(
    f"drpc/{config['name']}",
    "--for=jsonpath={.status.phase}=FailedOver",
    f"--namespace={config['namespace']}",
    "--timeout=300s",
    context=config["hub"],
    log=test.debug,
)

test.info("Waiting until application is replicated")
drenv.wait_for(
    f"drpc/{config['name']}",
    output="jsonpath={.status.lastGroupSyncTime}",
    namespace=config["namespace"],
    timeout=300,
    profile=config["hub"],
    log=test.debug,
)

test.info("Application was failed over to cluster %s successfully", args.cluster)
