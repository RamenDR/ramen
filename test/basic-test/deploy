#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import drenv
from drenv import kubectl
from drenv import test

test.start("deploy", __file__)
args = test.parse_args()
config = test.config

test.info("Deploying sample channel")
kubectl.apply(
    f"--kustomize={config['repo']}/channel?ref={config['branch']}",
    context=test.env["hub"],
    log=test.debug,
)

test.info("Deploying '%s' subscription", config["namespace"])
with drenv.kustomization(
    "subscription/kustomization.yaml",
    namespace=config["namespace"],
    repo=config["repo"],
    branch=config["branch"],
) as sub:
    kubectl.apply(f"--kustomize={sub}", context=test.env["hub"], log=test.debug)

test.info("waiting for namespace '%s'", config["namespace"])
drenv.wait_for(
    f"namespace/{config['namespace']}",
    timeout=60,
    profile=test.env["hub"],
    log=test.debug,
)

test.info("Waiting for '%s' placement decision", config["namespace"])
drenv.wait_for(
    f"placementrule/{config['placement']}",
    output="jsonpath={.status.decisions}",
    namespace=config["namespace"],
    timeout=60,
    profile=test.env["hub"],
    log=test.debug,
)

cluster = kubectl.get(
    f"placementrule/{config['placement']}",
    f"--namespace={config['namespace']}",
    "--output=jsonpath={.status.decisions[0].clusterName}",
    context=test.env["hub"],
)

test.info("Waiting until '%s' subscription reports phase", config["namespace"])
drenv.wait_for(
    f"subscription/{config['subscription']}",
    output="jsonpath={.status.phase}",
    namespace=config["namespace"],
    timeout=60,
    profile=test.env["hub"],
    log=test.debug,
)

test.info("Waiting until '%s' subscription is propagated", config["namespace"])
kubectl.wait(
    f"subscription/{config['subscription']}",
    "--for=jsonpath={.status.phase}=Propagated",
    f"--namespace={config['namespace']}",
    "--timeout=60s",
    context=test.env["hub"],
    log=test.debug,
)

test.info("Waiting until '%s' manifestwork is available", config["namespace"])
kubectl.wait(
    f"manifestwork/{config['namespace']}-{config['subscription']}",
    "--for=condition=available",
    f"--namespace={cluster}",
    "--timeout=60s",
    context=test.env["hub"],
    log=test.debug,
)

# Manifestwork can report condition=available before the deployment exist.
test.info("Waiting for '%s' deployment on cluster '%s'", config["namespace"], cluster)
drenv.wait_for(
    f"deploy/{config['deploy']}",
    namespace=config["namespace"],
    timeout=60,
    profile=cluster,
    log=test.debug,
)

test.info(
    "Waiting until '%s' deployment is rolled out on cluster '%s'",
    config["namespace"],
    cluster,
)
kubectl.rollout(
    "status",
    f"deploy/{config['deploy']}",
    f"--namespace={config['namespace']}",
    "--timeout=60s",
    context=cluster,
    log=test.debug,
)

test.info("Application '%s' was deployed successfully", config["namespace"])
