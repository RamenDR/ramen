#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os

import drenv
from drenv import commands
from drenv import kubectl
from drenv import test

test.start("deploy", __file__)
test.add_argument(
    "--cluster",
    help="Cluster name to deploy on (default first cluster)",
)
args = test.parse_args()
config = test.config

cluster = args.cluster or test.env["clusters"][0]
test.info("Deploying on cluster '%s'", cluster)

test.info("Creating temporary directory %s", config["tmp_dir"])
os.makedirs(config["tmp_dir"], exist_ok=True)

test.info("Cloning ocm-ramen-samples")
if not os.path.exists(config["samples_dir"]):
    cmd = [
        "git",
        "clone",
        "--depth=1",
        "--branch",
        config["samples_branch"],
        config["samples_repo"],
        config["samples_dir"],
    ]
    for line in commands.watch(*cmd):
        test.debug(line)

test.info("Creating kustomization for using cluster '%s'", cluster)
template = drenv.template("kustomization.yaml")
yaml = template.substitute(cluster_name=cluster)
with open(os.path.join(config["tmp_dir"], "kustomization.yaml"), "w") as f:
    f.write(yaml)

test.info("Deploying busybox example application")
kubectl.apply(
    f"--kustomize={config['tmp_dir']}",
    context=test.env["hub"],
    log=test.debug,
)

test.info("waiting for namespace %s", config["namespace"])
drenv.wait_for(
    f"namespace/{config['namespace']}",
    timeout=60,
    profile=test.env["hub"],
    log=test.debug,
)

test.info("Waiting until busybox drpc reports phase")
drenv.wait_for(
    f"drpc/{config['name']}",
    output="jsonpath={.status.phase}",
    namespace=config["namespace"],
    timeout=60,
    profile=test.env["hub"],
    log=test.debug,
)

test.info("Waiting until busybox drpc is deployed")
kubectl.wait(
    f"drpc/{config['name']}",
    "--for=jsonpath={.status.phase}=Deployed",
    f"--namespace={config['namespace']}",
    "--timeout=60s",
    context=test.env["hub"],
    log=test.debug,
)

test.info("Waiting until application is replicated")
drenv.wait_for(
    f"drpc/{config['name']}",
    output="jsonpath={.status.lastGroupSyncTime}",
    namespace=config["namespace"],
    timeout=300,
    profile=test.env["hub"],
    log=test.debug,
)

test.info("Application was deployed successfully")
