#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys

import drenv

HUB_NAMESPACE = "open-cluster-management"
CLUSTER_NAMESPACE = "open-cluster-management-agent-addon"

def deploy_hub(hub):
    drenv.log_progress(
        f"Installing governance policy framework in cluster {hub}",
    )
    drenv.run(
        "clusteradm", "install", "hub-addon",
        "--names", "governance-policy-framework",
        "--context", hub,
    )


def wait_for_hub_deployments(hub):
    for suffix in "propagator", "addon-controller":
        drenv.log_progress(
            f"Waiting until governance-policy-{suffix} is rolled out in "
            f"cluster {hub}",
        )
        drenv.kubectl(
            "rollout", "status", f"deploy/governance-policy-{suffix}",
            "--namespace", HUB_NAMESPACE,
            "--timeout", "300s",
            profile=hub,
        )


def deploy_clusters(hub, clusters):
    drenv.log_progress(
        f"Installing governance policy framework addons in clusters {clusters}"
    )
    drenv.run(
        "clusteradm", "addon", "enable",
        "--names", "governance-policy-framework",
        "--clusters", ",".join(clusters),
        "--context", hub,
    )

    drenv.log_progress(
        f"Installing config policy controller addon in clusters {clusters}",
    )
    drenv.run(
        "clusteradm", "addon", "enable",
        "--names", "config-policy-controller",
        "--clusters", ",".join(clusters),
        "--context", hub,
    )


def wait_for_clusters_deployments(clusters):
    for cluster in clusters:
        for deploy in "governance-policy-framework", "config-policy-controller":
            drenv.wait_for(
                f"deploy/{deploy}",
                namespace=CLUSTER_NAMESPACE,
                profile=cluster,
            )
            drenv.log_progress(
                f"Waiting until {deploy} is rolled out in cluster {cluster}",
            )
            drenv.kubectl(
                "rollout", "status", "deploy", deploy,
                "--namespace", CLUSTER_NAMESPACE,
                "--timeout", "300s",
                profile=cluster,
            )


if len(sys.argv) != 4:
    print(f"Usage: {sys.argv[0]} cluster1 cluster2 hub")
    sys.exit(1)

clusters = sys.argv[1:3]
hub = sys.argv[3]

# Deploy hub and managed clusters
deploy_hub(hub)
deploy_clusters(hub, clusters)

# And wait in parallel for all deploymnets.
wait_for_hub_deployments(hub)
wait_for_clusters_deployments(clusters)
