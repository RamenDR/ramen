#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys

import drenv
from drenv import cluster as drenv_cluster
from drenv import kubectl
from drenv import subctl

NAMESPACE = "submariner-operator"

BROKER_DEPLOYMENTS = ("submariner-operator",)

CLUSTER_DEPLOYMENTS = (
    "submariner-operator",
    "submariner-lighthouse-agent",
    "submariner-lighthouse-coredns",
)


def deploy_broker(broker):
    print(f"Waiting until broker '{broker}' is ready")
    drenv_cluster.wait_until_ready(broker)

    broker_dir = os.path.join(drenv.config_dir(broker), "submariner")
    broker_info = os.path.join(broker_dir, subctl.BROKER_INFO)

    print(f"Creating submariner configuration directory '{broker_dir}'")
    os.makedirs(broker_dir, exist_ok=True)

    print(f"Deploying submariner broker in cluster '{broker}'")
    subctl.deploy_broker(broker, globalnet=True, broker_info=broker_info)
    print(f"Broker info stored in '{broker_info}'")

    print(f"Waiting for submariner broker deployments in cluster '{broker}'")
    wait_for_deployments(broker, BROKER_DEPLOYMENTS, NAMESPACE)

    return broker_info


def join_cluster(cluster, broker_info):
    print(f"Waiting until cluster '{cluster}' is ready")
    drenv_cluster.wait_until_ready(cluster)

    print(f"Joining cluster '{cluster}' to broker")
    subctl.join(broker_info, context=cluster, clusterid=cluster, cable_driver="vxlan")


def wait_for_cluster(cluster):
    print(f"Waiting for submariner deployuments in cluster '{cluster}'")
    wait_for_deployments(cluster, CLUSTER_DEPLOYMENTS, NAMESPACE)


def wait_for_deployments(cluster, names, namespace):
    for name in names:
        deployment = f"deploy/{name}"
        print(f"Waiting until deployment '{name}' exists in cluster '{cluster}'")
        drenv.wait_for(deployment, namespace=namespace, profile=cluster)

        print(f"Waiting until deployment '{name}' is rolled out in cluster '{cluster}'")
        kubectl.rollout(
            "status",
            deployment,
            f"--namespace={namespace}",
            "--timeout=180s",
            context=cluster,
        )


if len(sys.argv) != 4:
    print(f"Usage: {sys.argv[0]} broker cluster1 cluster2")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
broker = sys.argv[1]
clusters = sys.argv[2:]

broker_info = deploy_broker(broker)

for cluster in clusters:
    join_cluster(cluster, broker_info)

for cluster in clusters:
    wait_for_cluster(cluster)
