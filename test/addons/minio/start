#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys

from drenv import kubectl


def deploy(cluster):
    print("Deploying minio")
    # Figure out the name of the default storage class and use kustomize to patch minio.yaml to use it
    default_storage_class = kubectl.get(
        "storageclass",
        "-o",
        'jsonpath={.items[?(@.metadata.annotations.storageclass\\.kubernetes\\.io/is-default-class=="true")].metadata.name}',
    )
    # error out if there is no default storage class
    if not default_storage_class:
        print("No default storage class found")
        sys.exit(1)

    if default_storage_class == "standard":
        kubectl.apply("--filename", "minio.yaml", context=cluster)
    else:
        with open("minio.yaml", "r") as f:
            minio_yaml = f.read()
        minio_yaml = minio_yaml.replace("standard", default_storage_class)
        kubectl.apply("--filename", "-", input=minio_yaml, context=cluster)


def wait(cluster):
    print("Waiting until minio is rolled out")
    kubectl.rollout(
        "status",
        "deployment/minio",
        "--namespace=minio",
        "--timeout=300s",
        context=cluster,
    )


if len(sys.argv) != 2:
    print(f"Usage: {sys.argv[0]} cluster")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
cluster = sys.argv[1]

deploy(cluster)
wait(cluster)
