#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys
import time

import drenv
from drenv import commands
from drenv import kubectl

if len(sys.argv) != 2:
    print(f"Usage: {sys.argv[0]} cluster")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
cluster = sys.argv[1]

print("Deploying demo")
kubectl.apply("--filename", "deployment.yaml", context=cluster)

print("Creating the service")
kubectl.apply("--filename", "service.yaml", context=cluster)

print("Waiting until deployment is rolled out")
kubectl.rollout(
    "status",
    "deployment",
    "--timeout=600s",
    context=cluster,
)

print("Waiting until ingress controller deployment is rolled out")
kubectl.rollout(
    "status",
    "ingress",
    "--namespace=ingress-nginx",
    "--timeout=600s",
    context=cluster,
)

# This can fail for 30 seconds before the webhook is available, but we don't
# have a way to wait for the webbook.
start = time.monotonic()
deadline = start + 60
delay = 1

while True:
    print("Configuring ingress")
    try:
        kubectl.apply("--filename", "ingress.yaml", context=cluster)
    except commands.Error as e:
        if "failed to call webhook" not in e.error or time.monotonic() > deadline:
            raise

        print(f"Deploying failed: {e}")
        print(f"Retrying in {delay} seconds")
        time.sleep(delay)
        delay = min(delay * 2, 16)
    else:
        print(f"Ingress configured in {time.monotonic() - start:.3f} seconds")
        break

print("Waiting until ingress is ready")
# It can take 40 seconds until the ingress gets an ingress ip address.
drenv.wait_for(
    "ingress/demo-ingress",
    output="jsonpath={.status.loadBalancer.ingress}",
    timeout=120,
    profile=cluster,
)
