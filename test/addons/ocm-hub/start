#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys

import drenv
from drenv import kubectl
from drenv import clusteradm

# Use default image version.
BUNDLE_VERSION = None

ADDONS = (
    {
        "name": "application-manager",
        "version": BUNDLE_VERSION,
    },
    {
        "name": "governance-policy-framework",
        "version": BUNDLE_VERSION,
    },
)

DEPLOYMENTS = {
    "open-cluster-management": (
        "cluster-manager",
        "governance-policy-addon-controller",
        "governance-policy-propagator",
        "multicluster-operators-appsub-summary",
        "multicluster-operators-channel",
        "multicluster-operators-placementrule",
        "multicluster-operators-subscription",
    ),
    "open-cluster-management-hub": (
        "cluster-manager-placement-controller",
        "cluster-manager-registration-controller",
        "cluster-manager-registration-webhook",
        "cluster-manager-work-webhook",
    ),
}


def deploy(cluster):
    print("Initializing hub")
    clusteradm.init(
        # With auto approval joined clusters are accepted automatically.
        feature_gates=["ManagedClusterAutoApproval=true"],
        bundle_version=BUNDLE_VERSION,
        wait=True,
        context=cluster,
    )

    print("Installing hub addons")
    for addon in ADDONS:
        clusteradm.install(
            "hub-addon",
            names=[addon["name"]],
            bundle_version=addon["version"],
            context=cluster,
        )


def wait(cluster):
    print("Waiting until deployments are rolled out")
    for ns, names in DEPLOYMENTS.items():
        for name in names:
            deployment = f"deploy/{name}"
            drenv.wait_for(deployment, namespace=ns, profile=cluster)
            kubectl.rollout(
                "status",
                deployment,
                f"--namespace={ns}",
                "--timeout=300s",
                context=cluster,
            )


if len(sys.argv) != 2:
    print(f"Usage: {sys.argv[0]} cluster")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
cluster = sys.argv[1]

deploy(cluster)
wait(cluster)
