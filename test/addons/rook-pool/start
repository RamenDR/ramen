#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import json
import os
import sys

import yaml

import drenv
from drenv import kubectl

POOL_NAMES = ["replicapool", "replicapool-2"]


def deploy(cluster):
    storage_classes = [
        {"name": "rook-ceph-block", "pool": POOL_NAMES[0]},
        {"name": "rook-ceph-block-2", "pool": POOL_NAMES[1]},
    ]

    print("Creating StorageClasses")
    for storage_class in storage_classes:
        template = drenv.template("storage-class.yaml")
        yaml = template.substitute(
            cluster=cluster, name=storage_class["name"], pool=storage_class["pool"]
        )
        kubectl.apply("--filename=-", input=yaml, context=cluster)

    print("Creating RBD pools")
    for pool in POOL_NAMES:
        template = drenv.template("replica-pool.yaml")
        yaml = template.substitute(cluster=cluster, name=pool)
        kubectl.apply("--filename=-", input=yaml, context=cluster)

    print("Creating SnapshotClass")
    template = drenv.template("snapshot-class.yaml")
    yaml = template.substitute(cluster=cluster)
    kubectl.apply("--filename=-", input=yaml, context=cluster)


def wait(cluster):
    print("Waiting until ceph block pool is ready")
    for pool in POOL_NAMES:
        drenv.wait_for(
            f"cephblockpool/{pool}",
            output="jsonpath={.status.phase}",
            namespace="rook-ceph",
            timeout=120,
            profile=cluster,
        )
        kubectl.wait(
            f"cephblockpool/{pool}",
            "--for=jsonpath={.status.phase}=Ready",
            "--namespace=rook-ceph",
            "--timeout=300s",
            context=cluster,
        )

        print("Waiting for replica pool peer token")
        kubectl.wait(
            f"cephblockpool/{pool}",
            "--for=jsonpath={.status.info.rbdMirrorBootstrapPeerSecretName}"
            f"=pool-peer-token-{pool}",
            "--namespace=rook-ceph",
            "--timeout=300s",
            context=cluster,
        )

        out = kubectl.get(
            f"cephblockpool/{pool}",
            "--output=jsonpath={.status}",
            "--namespace=rook-ceph",
            context=cluster,
        )
        info = {"ceph pool status": json.loads(out)}
        print(yaml.dump(info, sort_keys=False))


if len(sys.argv) != 2:
    print(f"Usage: {sys.argv[0]} cluster")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
cluster = sys.argv[1]

deploy(cluster)
wait(cluster)
