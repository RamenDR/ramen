#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import sys

from drenv import temporary_kubeconfig
from drenv import commands
from drenv import kubectl


def deploy_busybox(hub, cluster):
    print(
        f"Deploying application busybox-{cluster} in namespace argocd-test on cluster {cluster}"
    )
    # need use KUBECONFIG env, switch to hub cluster argocd ns first,
    # otherwise will hit argocd command bug
    # see https://github.com/argoproj/argo-cd/issues/14167
    with temporary_kubeconfig("drenv-argocd-test.") as env:
        kubeconfig = env["KUBECONFIG"]
        kubectl.config("use-context", hub, "--kubeconfig", kubeconfig)
        kubectl.config(
            "set-context",
            "--current",
            "--namespace=argocd",
            f"--kubeconfig={kubeconfig}",
        )

        for line in commands.watch(
            "argocd",
            "app",
            "create",
            f"busybox-{cluster}",
            "--repo=https://github.com/RamenDR/ocm-ramen-samples.git",
            "--path=workloads/deployment/k8s-regional-rbd",
            f"--dest-name={cluster}",
            "--dest-namespace=argocd-test",
            "--sync-option=CreateNamespace=true",
            "--sync-policy=automated",
            # Should not be needed, but without this the command is not idempotent.
            "--upsert",
            env=env,
        ):
            print(line)


def wait_until_busybox_is_healthy(hub, cluster):
    print(f"Waiting application busybox-{cluster} to be healthy")
    kubectl.wait(
        "application",
        f"busybox-{cluster}",
        "--for=jsonpath={.status.health.status}=Healthy",
        "--namespace=argocd",
        "--timeout=120s",
        context=hub,
    )


def undeploy_busybox(hub, cluster):
    print(f"Deleting application busybox-{cluster}")
    # need use KUBECONFIG env, switch to hub cluster argocd ns first,
    # otherwise will hit argocd command bug
    # see https://github.com/argoproj/argo-cd/issues/14167
    with temporary_kubeconfig("drenv-argocd-test.") as env:
        kubeconfig = env["KUBECONFIG"]
        kubectl.config("use-context", hub, "--kubeconfig", kubeconfig)
        kubectl.config(
            "set-context",
            "--current",
            "--namespace=argocd",
            f"--kubeconfig={kubeconfig}",
        )

        for line in commands.watch(
            "argocd",
            "app",
            "delete",
            f"busybox-{cluster}",
            "--yes",
            env=env,
        ):
            print(line)

    print(f"Deleting namespace argocd-test in cluster {cluster}")
    kubectl.delete(
        "namespace",
        "argocd-test",
        "--wait=false",
        "--ignore-not-found",
        context=cluster,
    )


def wait_until_busybox_is_deleted(hub, cluster):
    print(f"Waiting until application busybox-{cluster} is deleted")
    kubectl.wait(
        "application",
        f"busybox-{cluster}",
        "--for=delete",
        "--namespace=argocd",
        "--timeout=60s",
        context=hub,
    )
    print(f"Waiting until namespace argocd-test is deleted in cluster {cluster}")
    kubectl.wait(
        "ns",
        "argocd-test",
        "--for=delete",
        "--timeout=60s",
        context=cluster,
    )


if len(sys.argv) != 4:
    print(f"Usage: {sys.argv[0]} hub cluster1 cluster2")
    sys.exit(1)

hub, *clusters = sys.argv[1:]

for cluster in clusters:
    deploy_busybox(hub, cluster)

for cluster in clusters:
    wait_until_busybox_is_healthy(hub, cluster)

for cluster in clusters:
    undeploy_busybox(hub, cluster)

for cluster in clusters:
    wait_until_busybox_is_deleted(hub, cluster)
