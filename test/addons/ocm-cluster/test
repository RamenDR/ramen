#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys

import drenv
from drenv import kubectl


def deploy_work(cluster, hub, work):
    print(f"Applying manifestwork to namespace '{cluster}'")
    kubectl.apply("--filename", "-", input=work, context=hub)


def wait_for_work(cluster, hub):
    print(f"Waiting until manifestwork is applied in namespace '{cluster}'")
    kubectl.wait(
        "manifestwork/example-manifestwork",
        "--for=condition=applied",
        f"--namespace={cluster}",
        "--timeout=600s",
        context=hub,
    )


def wait_for_deployment(cluster, hub):
    print(f"Waiting until manifestwork is available in namespace '{cluster}'")
    kubectl.wait(
        "manifestwork/example-manifestwork",
        "--for=condition=available",
        f"--namespace={cluster}",
        "--timeout=600s",
        context=hub,
    )

    print(f"Waiting until deployment is available in cluster '{cluster}'")
    kubectl.wait(
        "deploy/example-deployment",
        "--for=condition=available",
        "--timeout=600s",
        context=cluster,
    )


def delete_work(cluster, hub, work):
    print(f"Deleting manifestwork from namespace '{cluster}'")
    kubectl.delete("--filename", "-", input=work, context=hub)


def wait_for_delete_work(cluster, hub):
    print(f"Waiting until manifestwork is deleted from namspace '{cluster}'")
    kubectl.wait(
        "manifestwork/example-manifestwork",
        "--for=delete",
        f"--namespace={cluster}",
        "--timeout=600s",
        context=hub,
    )


def wait_for_delete_deployment(cluster):
    print(f"Waiting until deployment is deleted from cluster '{cluster}'")
    kubectl.wait(
        "deploy/example-deployment",
        "--for=delete",
        "--timeout=600s",
        context=cluster,
    )


if len(sys.argv) != 3:
    print(f"Usage: {sys.argv[0]} cluster hub")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
cluster = sys.argv[1]
hub = sys.argv[2]

template = drenv.template("example-manifestwork.yaml")
work = template.substitute(namespace=cluster)

deploy_work(cluster, hub, work)
wait_for_work(cluster, hub)
wait_for_deployment(cluster, hub)

delete_work(cluster, hub, work)
wait_for_delete_work(cluster, hub)
wait_for_delete_deployment(cluster)
