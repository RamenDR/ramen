#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import json
import os
import sys
import time

import drenv
from drenv import cluster
from drenv import clusteradm
from drenv import kubectl

# Use default image version.
BUNDLE_VERSION = None

ADDONS = (
    {
        "name": "application-manager",
        "deployment": "application-manager",
    },
    {
        "name": "governance-policy-framework",
        "deployment": "governance-policy-framework",
    },
    {
        "name": "config-policy-controller",
        "deployment": "config-policy-controller",
    },
)


ADDONS_NAMESPACE = "open-cluster-management-agent-addon"
# These are deployed when running "addons/ocm-hub/start" on the hub.  We wait
# for them before we try to join the hub.
HUB_DEPLOYMENTS = {
    "open-cluster-management": (
        "cluster-manager",
        "governance-policy-addon-controller",
        "governance-policy-propagator",
        "multicluster-operators-appsub-summary",
        "multicluster-operators-channel",
        "multicluster-operators-placementrule",
        "multicluster-operators-subscription",
    ),
    "open-cluster-management-hub": (
        "cluster-manager-placement-controller",
        "cluster-manager-registration-controller",
        "cluster-manager-registration-webhook",
        "cluster-manager-work-webhook",
    ),
}


def deploy(cluster, hub):
    wait_for_hub(hub)
    join_cluster(cluster, hub)
    wait_for_managed_cluster(cluster, hub)
    label_cluster(cluster, hub)
    enable_addons(cluster, hub)


def wait(cluster):
    print("Waiting until deployments are rolled out")
    for addon in ADDONS:
        deployment = f"deploy/{addon['deployment']}"
        drenv.wait_for(deployment, namespace=ADDONS_NAMESPACE, profile=cluster)
        kubectl.rollout(
            "status",
            deployment,
            f"--namespace={ADDONS_NAMESPACE}",
            "--timeout=300s",
            context=cluster,
        )


def wait_for_hub(hub):
    print(f"Waiting until cluster '{hub}' is ready")

    cluster.wait_until_ready(hub)

    for namespace, deployments in HUB_DEPLOYMENTS.items():
        print(f"Waiting until namespace '{namespace}' is created on cluster '{hub}'")
        drenv.wait_for(f"namespace/{namespace}", profile=hub)

        for name in deployments:
            deployment = f"deploy/{name}"
            print(f"Waiting until deplyment '{name}' is rolled out on cluster '{hub}'")
            drenv.wait_for(deployment, namespace=namespace, profile=hub)
            kubectl.rollout(
                "status",
                deployment,
                f"--namespace={namespace}",
                "--timeout=300s",
                context=hub,
            )


def join_cluster(cluster, hub):
    print(f"Joining cluster '{hub}'")

    out = clusteradm.get("token", output="json", context=hub)
    hub_info = json.loads(out)

    clusteradm.join(
        hub_token=hub_info["hub-token"],
        hub_apiserver=hub_info["hub-apiserver"],
        cluster_name=cluster,
        bundle_version=BUNDLE_VERSION,
        wait=True,
        context=cluster,
    )


def label_cluster(cluster, hub):
    # Managed cluster must have name=cluster label in addition to
    # metadata.name.
    # https://github.com/open-cluster-management-io/multicloud-operators-subscription/issues/16
    print("Labelling cluster")
    kubectl.label(
        f"managedclusters/{cluster}",
        f"name={cluster}",
        overwrite=True,
        context=hub,
    )


def wait_for_managed_cluster(cluster, hub):
    # This takes less then a second, but sometimes it never complete, even if waiting 10 minutes.
    start = time.monotonic()

    print(f"Waiting until managed cluster '{cluster}' is created on the hub")
    drenv.wait_for(
        f"managedcluster/{cluster}",
        timeout=60,
        profile=hub,
    )

    print(f"Waiting until managed cluster '{cluster}' hubAcceptsClient is true")
    kubectl.wait(
        f"managedcluster/{cluster}",
        "--for=jsonpath={.spec.hubAcceptsClient}=true",
        "--timeout=60s",
        context=hub,
    )

    for condition in (
        "HubAcceptedManagedCluster",
        "ManagedClusterJoined",
        "ManagedClusterConditionAvailable",
    ):
        print(f"Waiting for managed cluster '{cluster}' condition {condition}")
        kubectl.wait(
            f"managedcluster/{cluster}",
            f"--for=condition={condition}",
            "--timeout=60s",
            context=hub,
        )

    elapsed = time.monotonic() - start
    print(f"managed cluster '{cluster}' became available in {elapsed:.2f} seconds")


def enable_addons(cluster, hub):
    print("Enabling addons")
    names = [addon["name"] for addon in ADDONS]
    clusteradm.addon("enable", names=names, clusters=[cluster], context=hub)


if len(sys.argv) != 3:
    print(f"Usage: {sys.argv[0]} cluster hub")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
cluster_name = sys.argv[1]
hub_name = sys.argv[2]

deploy(cluster_name, hub_name)
wait(cluster_name)
