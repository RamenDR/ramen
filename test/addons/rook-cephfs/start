#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys

import drenv
from drenv import kubectl

STORAGE_CLASS_NAME_PREFIX = "rook-cephfs-"
FS_NAMES = ["test-fs1", "test-fs2"]
CEPHFS_VOLUME_SNAPSHOT_CLASSES = [
    "csi-cephfsplugin-snapclass",
    "csi-cephfsplugin-snapclass-2",
]

STORAGE_CLASSES_MAP = [
    {"fs": fs, "name": f"{STORAGE_CLASS_NAME_PREFIX}{fs}", "vsc": vsc}
    for fs, vsc in zip(FS_NAMES, CEPHFS_VOLUME_SNAPSHOT_CLASSES)
]


def deploy(cluster):
    for storage_class in STORAGE_CLASSES_MAP:
        print("Creating CephFS instances")
        template = drenv.template("filesystem.yaml")
        yaml = template.substitute(cluster=cluster, name=storage_class["fs"])
        kubectl.apply("--filename=-", input=yaml, context=cluster)

        print("Creating StorageClasses")
        template = drenv.template("storage-class.yaml")
        yaml = template.substitute(
            cluster=cluster, fsname=storage_class["fs"], name=storage_class["name"]
        )
        kubectl.apply("--filename=-", input=yaml, context=cluster)

        print("Creating SnapshotClasses")
        template = drenv.template("snapshot-class.yaml")
        yaml = template.substitute(
            cluster=cluster,
            vscname=storage_class["vsc"],
            scname=storage_class["name"],
            fsname=storage_class["fs"],
        )
        kubectl.apply("--filename=-", input=yaml, context=cluster)


def wait(cluster):
    print("Waiting until Ceph File Systems are ready")

    for fs_name in FS_NAMES:
        drenv.wait_for(
            f"cephfilesystem/{fs_name}",
            output="jsonpath={.status.phase}",
            namespace="rook-ceph",
            timeout=120,
            profile=cluster,
        )
        kubectl.wait(
            f"cephfilesystem/{fs_name}",
            "--for=jsonpath={.status.phase}=Ready",
            "--namespace=rook-ceph",
            "--timeout=300s",
            context=cluster,
        )


if len(sys.argv) != 2:
    print(f"Usage: {sys.argv[0]} cluster")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
cluster = sys.argv[1]

deploy(cluster)
wait(cluster)
