#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import argparse
import os

import drenv
from drenv import kubectl

import config
import minio

parser = argparse.ArgumentParser("deploy")
parser.add_argument("env_type", choices=config.ENV_TYPES)
args = parser.parse_args()

print(f"Configuring ramen for {args.env_type}")

os.chdir(os.path.dirname(__file__))

print("Waiting until ramen-hub-operator is rolled out")
kubectl.rollout(
    "status",
    "deploy/ramen-hub-operator",
    f"--namespace={config.NAMESPACE}",
    "--timeout=180s",
    context=config.HUB,
)

print("Creating s3 secret in ramen hub namespace")
kubectl.apply("--filename=s3-secret.yaml", context=config.HUB)

print("Updating ramen config map")
template = drenv.template("configmap.yaml")
yaml = template.substitute(
    # Auto deploy is needed only for olm install.
    auto_deploy=False,
    minio_url_dr1=minio.service_url(config.CLUSTERS[0]),
    minio_url_dr2=minio.service_url(config.CLUSTERS[1]),
)
kubectl.apply("--filename=-", input=yaml, context=config.HUB)

print(f"Creating DRClusters and DRPolicy for {args.env_type}")
kubectl.apply("--kustomize", args.env_type, context=config.HUB)

print("Waiting until DRClusters report phase")
for name in config.CLUSTERS:
    drenv.wait_for(
        f"drcluster/{name}",
        output="jsonpath={.status.phase}",
        namespace=config.NAMESPACE,
        timeout=180,
        profile=config.HUB,
    )

print("Waiting until DRClusters phase is available")
kubectl.wait(
    "drcluster",
    "--all",
    "--for=jsonpath={.status.phase}=Available",
    f"--namespace={config.NAMESPACE}",
    context=config.HUB,
)

print("Waiting until DRPolicy is validated")
kubectl.wait(
    "drpolicy/dr-policy",
    "--for=condition=Validated",
    f"--namespace={config.NAMESPACE}",
    context=config.HUB,
)

print("Creating channel")
kubectl.apply("--filename", "samples-channel.yaml", context=config.HUB)

print("Ramen was configured successfully")
