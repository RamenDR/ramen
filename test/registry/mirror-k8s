#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import http
import http.client
import os
import subprocess
import sys

PORT = 5000


def main():
    os.chdir(os.path.dirname(__file__))

    if len(sys.argv) > 1:
        version = sys.argv[1]
    else:
        version = "stable"

    for image in list_k8s_images(version):
        # registry.k8s.io/name:tag -> k8s/name:tag
        image_name = "k8s/" + os.path.basename(image)
        local_image = f"localhost:{PORT}/" + image_name

        if image_exists(image_name):
            print(f"{local_image} exists")
        else:
            print(f"mirroring {image} to {local_image}")
            mirror_image(image, local_image)


def list_k8s_images(version):
    subprocess.run(
        ["podman", "build", "--tag", "kubeadm:latest", "kubeadm"], check=True
    )
    out = subprocess.check_output(
        [
            "podman",
            "run",
            "--rm",
            "kubeadm:latest",
            "config",
            "images",
            "list",
            "--kubernetes-version",
            version,
        ],
        text=True,
    )
    return out.splitlines()


def image_exists(image):
    name, tag = image.split(":")
    conn = http.client.HTTPConnection("localhost", PORT, timeout=10)
    try:
        conn.request("HEAD", f"/v2/{name}/manifests/{tag}")
        response = conn.getresponse()
        return response.status == http.HTTPStatus.OK
    except Exception as e:
        print(f"failed to check if '{name}:{tag}' exists: {e}")
        return False
    finally:
        conn.close()


def mirror_image(src, target):
    subprocess.run(["podman", "pull", src], check=True)
    subprocess.run(["podman", "push", src, target], check=True)


if __name__ == "__main__":
    main()
