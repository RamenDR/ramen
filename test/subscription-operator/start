#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys

import drenv

# Current upstream looks very different (e.g. no application-operator.yaml).
IMAGE_TAG = "2.3.0"
TAG = "v2.3.0-ACM"
BASE_URL = f"https://raw.githubusercontent.com/stolostron/multicloud-operators-subscription/{TAG}"
NAMESPACE = "multicluster-operators"

if len(sys.argv) != 4:
    print(f"Usage: {sys.argv[0]} cluster1 cluster2 hub")
    sys.exit(1)

cluster1 = sys.argv[1]
cluster2 = sys.argv[2]
hub = sys.argv[3]

hub_kubeconfig = os.path.join(drenv.config_dir(hub), "kubeconfig")

for cluster in hub, cluster1, cluster2:
    drenv.log_progress(f"Deploying common resources in cluster {cluster}")
    with drenv.kustomization(
        "subscription-operator/common.yaml",
        base_url=BASE_URL,
    ) as kustomization:
        drenv.kubectl("apply", "--kustomize", kustomization, profile=cluster)

for cluster in cluster1, cluster2:
    # Add label name=cluster_name to managed clusters in the hub.
    # https://github.com/open-cluster-management-io/multicloud-operators-subscription/issues/16
    # TODO: Check this hack is still needed.
    drenv.log_progress(
        f"Label managedcluster {cluster} in cluster {hub}"
    )
    drenv.kubectl(
        "label", f"managedclusters/{cluster}", f"name={cluster}",
        "--overwrite",
        profile=hub,
    )

    # Create secret with hub config in managed clusters.
    drenv.log_progress(
        f"Create secret appmgr-hub-kubeconfig in cluster {cluster}"
    )
    secret_yaml = drenv.kubectl(
        "create", "secret", "generic", "appmgr-hub-kubeconfig",
        f"--from-file=kubeconfig={hub_kubeconfig}",
        "--dry-run=client",
        "--output=yaml",
        verbose=False,
        profile=cluster,
    )
    drenv.kubectl(
        "apply",
        "--filename", "-",
        "--namespace", NAMESPACE,
        input=secret_yaml,
        profile=cluster,
    )

drenv.log_progress(f"Deploying hub operators in cluster {cluster}")
with drenv.kustomization(
    f"subscription-operator/hub.yaml",
    base_url=BASE_URL,
    image_tag=IMAGE_TAG,
) as kustomization:
    drenv.kubectl("apply", "--kustomize", kustomization, profile=hub)

for cluster in cluster1, cluster2:
    drenv.log_progress(f"Deploying managed cluster operators in cluster {cluster}")
    with drenv.kustomization(
        f"subscription-operator/managed.yaml",
        base_url=BASE_URL,
        image_tag=IMAGE_TAG,
        cluster_name=cluster,
    ) as kustomization:
        drenv.kubectl("apply", "--kustomize", kustomization, profile=cluster)

for cluster in hub, cluster1, cluster2:
    drenv.log_progress(f"Waiting for {NAMESPACE} deployments in cluster {cluster}")
    drenv.kubectl(
        "wait", "deploy",
        "--all",
        "--namespace", NAMESPACE,
        "--for", "condition=available",
        "--timeout", "120s",
        profile=cluster,
    )
