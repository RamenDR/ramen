// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/ramendr/ramen/controllers/cephfscg"
	v1 "k8s.io/api/core/v1"
	v1a "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type FakeVolumeGroupSourceHandler struct {
	CheckReplicationSourceForRestoredPVCsCompletedStub        func(context.Context, []*v1.ObjectReference) (bool, error)
	checkReplicationSourceForRestoredPVCsCompletedMutex       sync.RWMutex
	checkReplicationSourceForRestoredPVCsCompletedArgsForCall []struct {
		arg1 context.Context
		arg2 []*v1.ObjectReference
	}
	checkReplicationSourceForRestoredPVCsCompletedReturns struct {
		result1 bool
		result2 error
	}
	checkReplicationSourceForRestoredPVCsCompletedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CleanVolumeGroupSnapshotStub        func(context.Context) error
	cleanVolumeGroupSnapshotMutex       sync.RWMutex
	cleanVolumeGroupSnapshotArgsForCall []struct {
		arg1 context.Context
	}
	cleanVolumeGroupSnapshotReturns struct {
		result1 error
	}
	cleanVolumeGroupSnapshotReturnsOnCall map[int]struct {
		result1 error
	}
	CreateOrUpdateReplicationSourceForRestoredPVCsStub        func(context.Context, string, []cephfscg.RestoredPVC, v1a.Object) ([]*v1.ObjectReference, error)
	createOrUpdateReplicationSourceForRestoredPVCsMutex       sync.RWMutex
	createOrUpdateReplicationSourceForRestoredPVCsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []cephfscg.RestoredPVC
		arg4 v1a.Object
	}
	createOrUpdateReplicationSourceForRestoredPVCsReturns struct {
		result1 []*v1.ObjectReference
		result2 error
	}
	createOrUpdateReplicationSourceForRestoredPVCsReturnsOnCall map[int]struct {
		result1 []*v1.ObjectReference
		result2 error
	}
	CreateOrUpdateVolumeGroupSnapshotStub        func(context.Context, v1a.Object) error
	createOrUpdateVolumeGroupSnapshotMutex       sync.RWMutex
	createOrUpdateVolumeGroupSnapshotArgsForCall []struct {
		arg1 context.Context
		arg2 v1a.Object
	}
	createOrUpdateVolumeGroupSnapshotReturns struct {
		result1 error
	}
	createOrUpdateVolumeGroupSnapshotReturnsOnCall map[int]struct {
		result1 error
	}
	RestoreVolumesFromVolumeGroupSnapshotStub        func(context.Context, v1a.Object) ([]cephfscg.RestoredPVC, error)
	restoreVolumesFromVolumeGroupSnapshotMutex       sync.RWMutex
	restoreVolumesFromVolumeGroupSnapshotArgsForCall []struct {
		arg1 context.Context
		arg2 v1a.Object
	}
	restoreVolumesFromVolumeGroupSnapshotReturns struct {
		result1 []cephfscg.RestoredPVC
		result2 error
	}
	restoreVolumesFromVolumeGroupSnapshotReturnsOnCall map[int]struct {
		result1 []cephfscg.RestoredPVC
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVolumeGroupSourceHandler) CheckReplicationSourceForRestoredPVCsCompleted(arg1 context.Context, arg2 []*v1.ObjectReference) (bool, error) {
	var arg2Copy []*v1.ObjectReference
	if arg2 != nil {
		arg2Copy = make([]*v1.ObjectReference, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.checkReplicationSourceForRestoredPVCsCompletedMutex.Lock()
	ret, specificReturn := fake.checkReplicationSourceForRestoredPVCsCompletedReturnsOnCall[len(fake.checkReplicationSourceForRestoredPVCsCompletedArgsForCall)]
	fake.checkReplicationSourceForRestoredPVCsCompletedArgsForCall = append(fake.checkReplicationSourceForRestoredPVCsCompletedArgsForCall, struct {
		arg1 context.Context
		arg2 []*v1.ObjectReference
	}{arg1, arg2Copy})
	stub := fake.CheckReplicationSourceForRestoredPVCsCompletedStub
	fakeReturns := fake.checkReplicationSourceForRestoredPVCsCompletedReturns
	fake.recordInvocation("CheckReplicationSourceForRestoredPVCsCompleted", []interface{}{arg1, arg2Copy})
	fake.checkReplicationSourceForRestoredPVCsCompletedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumeGroupSourceHandler) CheckReplicationSourceForRestoredPVCsCompletedCallCount() int {
	fake.checkReplicationSourceForRestoredPVCsCompletedMutex.RLock()
	defer fake.checkReplicationSourceForRestoredPVCsCompletedMutex.RUnlock()
	return len(fake.checkReplicationSourceForRestoredPVCsCompletedArgsForCall)
}

func (fake *FakeVolumeGroupSourceHandler) CheckReplicationSourceForRestoredPVCsCompletedCalls(stub func(context.Context, []*v1.ObjectReference) (bool, error)) {
	fake.checkReplicationSourceForRestoredPVCsCompletedMutex.Lock()
	defer fake.checkReplicationSourceForRestoredPVCsCompletedMutex.Unlock()
	fake.CheckReplicationSourceForRestoredPVCsCompletedStub = stub
}

func (fake *FakeVolumeGroupSourceHandler) CheckReplicationSourceForRestoredPVCsCompletedArgsForCall(i int) (context.Context, []*v1.ObjectReference) {
	fake.checkReplicationSourceForRestoredPVCsCompletedMutex.RLock()
	defer fake.checkReplicationSourceForRestoredPVCsCompletedMutex.RUnlock()
	argsForCall := fake.checkReplicationSourceForRestoredPVCsCompletedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVolumeGroupSourceHandler) CheckReplicationSourceForRestoredPVCsCompletedReturns(result1 bool, result2 error) {
	fake.checkReplicationSourceForRestoredPVCsCompletedMutex.Lock()
	defer fake.checkReplicationSourceForRestoredPVCsCompletedMutex.Unlock()
	fake.CheckReplicationSourceForRestoredPVCsCompletedStub = nil
	fake.checkReplicationSourceForRestoredPVCsCompletedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeGroupSourceHandler) CheckReplicationSourceForRestoredPVCsCompletedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkReplicationSourceForRestoredPVCsCompletedMutex.Lock()
	defer fake.checkReplicationSourceForRestoredPVCsCompletedMutex.Unlock()
	fake.CheckReplicationSourceForRestoredPVCsCompletedStub = nil
	if fake.checkReplicationSourceForRestoredPVCsCompletedReturnsOnCall == nil {
		fake.checkReplicationSourceForRestoredPVCsCompletedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkReplicationSourceForRestoredPVCsCompletedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeGroupSourceHandler) CleanVolumeGroupSnapshot(arg1 context.Context) error {
	fake.cleanVolumeGroupSnapshotMutex.Lock()
	ret, specificReturn := fake.cleanVolumeGroupSnapshotReturnsOnCall[len(fake.cleanVolumeGroupSnapshotArgsForCall)]
	fake.cleanVolumeGroupSnapshotArgsForCall = append(fake.cleanVolumeGroupSnapshotArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CleanVolumeGroupSnapshotStub
	fakeReturns := fake.cleanVolumeGroupSnapshotReturns
	fake.recordInvocation("CleanVolumeGroupSnapshot", []interface{}{arg1})
	fake.cleanVolumeGroupSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVolumeGroupSourceHandler) CleanVolumeGroupSnapshotCallCount() int {
	fake.cleanVolumeGroupSnapshotMutex.RLock()
	defer fake.cleanVolumeGroupSnapshotMutex.RUnlock()
	return len(fake.cleanVolumeGroupSnapshotArgsForCall)
}

func (fake *FakeVolumeGroupSourceHandler) CleanVolumeGroupSnapshotCalls(stub func(context.Context) error) {
	fake.cleanVolumeGroupSnapshotMutex.Lock()
	defer fake.cleanVolumeGroupSnapshotMutex.Unlock()
	fake.CleanVolumeGroupSnapshotStub = stub
}

func (fake *FakeVolumeGroupSourceHandler) CleanVolumeGroupSnapshotArgsForCall(i int) context.Context {
	fake.cleanVolumeGroupSnapshotMutex.RLock()
	defer fake.cleanVolumeGroupSnapshotMutex.RUnlock()
	argsForCall := fake.cleanVolumeGroupSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVolumeGroupSourceHandler) CleanVolumeGroupSnapshotReturns(result1 error) {
	fake.cleanVolumeGroupSnapshotMutex.Lock()
	defer fake.cleanVolumeGroupSnapshotMutex.Unlock()
	fake.CleanVolumeGroupSnapshotStub = nil
	fake.cleanVolumeGroupSnapshotReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeGroupSourceHandler) CleanVolumeGroupSnapshotReturnsOnCall(i int, result1 error) {
	fake.cleanVolumeGroupSnapshotMutex.Lock()
	defer fake.cleanVolumeGroupSnapshotMutex.Unlock()
	fake.CleanVolumeGroupSnapshotStub = nil
	if fake.cleanVolumeGroupSnapshotReturnsOnCall == nil {
		fake.cleanVolumeGroupSnapshotReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanVolumeGroupSnapshotReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateReplicationSourceForRestoredPVCs(arg1 context.Context, arg2 string, arg3 []cephfscg.RestoredPVC, arg4 v1a.Object) ([]*v1.ObjectReference, error) {
	var arg3Copy []cephfscg.RestoredPVC
	if arg3 != nil {
		arg3Copy = make([]cephfscg.RestoredPVC, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.Lock()
	ret, specificReturn := fake.createOrUpdateReplicationSourceForRestoredPVCsReturnsOnCall[len(fake.createOrUpdateReplicationSourceForRestoredPVCsArgsForCall)]
	fake.createOrUpdateReplicationSourceForRestoredPVCsArgsForCall = append(fake.createOrUpdateReplicationSourceForRestoredPVCsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []cephfscg.RestoredPVC
		arg4 v1a.Object
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.CreateOrUpdateReplicationSourceForRestoredPVCsStub
	fakeReturns := fake.createOrUpdateReplicationSourceForRestoredPVCsReturns
	fake.recordInvocation("CreateOrUpdateReplicationSourceForRestoredPVCs", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateReplicationSourceForRestoredPVCsCallCount() int {
	fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.RLock()
	defer fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.RUnlock()
	return len(fake.createOrUpdateReplicationSourceForRestoredPVCsArgsForCall)
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateReplicationSourceForRestoredPVCsCalls(stub func(context.Context, string, []cephfscg.RestoredPVC, v1a.Object) ([]*v1.ObjectReference, error)) {
	fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.Lock()
	defer fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.Unlock()
	fake.CreateOrUpdateReplicationSourceForRestoredPVCsStub = stub
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateReplicationSourceForRestoredPVCsArgsForCall(i int) (context.Context, string, []cephfscg.RestoredPVC, v1a.Object) {
	fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.RLock()
	defer fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.RUnlock()
	argsForCall := fake.createOrUpdateReplicationSourceForRestoredPVCsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateReplicationSourceForRestoredPVCsReturns(result1 []*v1.ObjectReference, result2 error) {
	fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.Lock()
	defer fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.Unlock()
	fake.CreateOrUpdateReplicationSourceForRestoredPVCsStub = nil
	fake.createOrUpdateReplicationSourceForRestoredPVCsReturns = struct {
		result1 []*v1.ObjectReference
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateReplicationSourceForRestoredPVCsReturnsOnCall(i int, result1 []*v1.ObjectReference, result2 error) {
	fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.Lock()
	defer fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.Unlock()
	fake.CreateOrUpdateReplicationSourceForRestoredPVCsStub = nil
	if fake.createOrUpdateReplicationSourceForRestoredPVCsReturnsOnCall == nil {
		fake.createOrUpdateReplicationSourceForRestoredPVCsReturnsOnCall = make(map[int]struct {
			result1 []*v1.ObjectReference
			result2 error
		})
	}
	fake.createOrUpdateReplicationSourceForRestoredPVCsReturnsOnCall[i] = struct {
		result1 []*v1.ObjectReference
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateVolumeGroupSnapshot(arg1 context.Context, arg2 v1a.Object) error {
	fake.createOrUpdateVolumeGroupSnapshotMutex.Lock()
	ret, specificReturn := fake.createOrUpdateVolumeGroupSnapshotReturnsOnCall[len(fake.createOrUpdateVolumeGroupSnapshotArgsForCall)]
	fake.createOrUpdateVolumeGroupSnapshotArgsForCall = append(fake.createOrUpdateVolumeGroupSnapshotArgsForCall, struct {
		arg1 context.Context
		arg2 v1a.Object
	}{arg1, arg2})
	stub := fake.CreateOrUpdateVolumeGroupSnapshotStub
	fakeReturns := fake.createOrUpdateVolumeGroupSnapshotReturns
	fake.recordInvocation("CreateOrUpdateVolumeGroupSnapshot", []interface{}{arg1, arg2})
	fake.createOrUpdateVolumeGroupSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateVolumeGroupSnapshotCallCount() int {
	fake.createOrUpdateVolumeGroupSnapshotMutex.RLock()
	defer fake.createOrUpdateVolumeGroupSnapshotMutex.RUnlock()
	return len(fake.createOrUpdateVolumeGroupSnapshotArgsForCall)
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateVolumeGroupSnapshotCalls(stub func(context.Context, v1a.Object) error) {
	fake.createOrUpdateVolumeGroupSnapshotMutex.Lock()
	defer fake.createOrUpdateVolumeGroupSnapshotMutex.Unlock()
	fake.CreateOrUpdateVolumeGroupSnapshotStub = stub
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateVolumeGroupSnapshotArgsForCall(i int) (context.Context, v1a.Object) {
	fake.createOrUpdateVolumeGroupSnapshotMutex.RLock()
	defer fake.createOrUpdateVolumeGroupSnapshotMutex.RUnlock()
	argsForCall := fake.createOrUpdateVolumeGroupSnapshotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateVolumeGroupSnapshotReturns(result1 error) {
	fake.createOrUpdateVolumeGroupSnapshotMutex.Lock()
	defer fake.createOrUpdateVolumeGroupSnapshotMutex.Unlock()
	fake.CreateOrUpdateVolumeGroupSnapshotStub = nil
	fake.createOrUpdateVolumeGroupSnapshotReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeGroupSourceHandler) CreateOrUpdateVolumeGroupSnapshotReturnsOnCall(i int, result1 error) {
	fake.createOrUpdateVolumeGroupSnapshotMutex.Lock()
	defer fake.createOrUpdateVolumeGroupSnapshotMutex.Unlock()
	fake.CreateOrUpdateVolumeGroupSnapshotStub = nil
	if fake.createOrUpdateVolumeGroupSnapshotReturnsOnCall == nil {
		fake.createOrUpdateVolumeGroupSnapshotReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createOrUpdateVolumeGroupSnapshotReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeGroupSourceHandler) RestoreVolumesFromVolumeGroupSnapshot(arg1 context.Context, arg2 v1a.Object) ([]cephfscg.RestoredPVC, error) {
	fake.restoreVolumesFromVolumeGroupSnapshotMutex.Lock()
	ret, specificReturn := fake.restoreVolumesFromVolumeGroupSnapshotReturnsOnCall[len(fake.restoreVolumesFromVolumeGroupSnapshotArgsForCall)]
	fake.restoreVolumesFromVolumeGroupSnapshotArgsForCall = append(fake.restoreVolumesFromVolumeGroupSnapshotArgsForCall, struct {
		arg1 context.Context
		arg2 v1a.Object
	}{arg1, arg2})
	stub := fake.RestoreVolumesFromVolumeGroupSnapshotStub
	fakeReturns := fake.restoreVolumesFromVolumeGroupSnapshotReturns
	fake.recordInvocation("RestoreVolumesFromVolumeGroupSnapshot", []interface{}{arg1, arg2})
	fake.restoreVolumesFromVolumeGroupSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumeGroupSourceHandler) RestoreVolumesFromVolumeGroupSnapshotCallCount() int {
	fake.restoreVolumesFromVolumeGroupSnapshotMutex.RLock()
	defer fake.restoreVolumesFromVolumeGroupSnapshotMutex.RUnlock()
	return len(fake.restoreVolumesFromVolumeGroupSnapshotArgsForCall)
}

func (fake *FakeVolumeGroupSourceHandler) RestoreVolumesFromVolumeGroupSnapshotCalls(stub func(context.Context, v1a.Object) ([]cephfscg.RestoredPVC, error)) {
	fake.restoreVolumesFromVolumeGroupSnapshotMutex.Lock()
	defer fake.restoreVolumesFromVolumeGroupSnapshotMutex.Unlock()
	fake.RestoreVolumesFromVolumeGroupSnapshotStub = stub
}

func (fake *FakeVolumeGroupSourceHandler) RestoreVolumesFromVolumeGroupSnapshotArgsForCall(i int) (context.Context, v1a.Object) {
	fake.restoreVolumesFromVolumeGroupSnapshotMutex.RLock()
	defer fake.restoreVolumesFromVolumeGroupSnapshotMutex.RUnlock()
	argsForCall := fake.restoreVolumesFromVolumeGroupSnapshotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVolumeGroupSourceHandler) RestoreVolumesFromVolumeGroupSnapshotReturns(result1 []cephfscg.RestoredPVC, result2 error) {
	fake.restoreVolumesFromVolumeGroupSnapshotMutex.Lock()
	defer fake.restoreVolumesFromVolumeGroupSnapshotMutex.Unlock()
	fake.RestoreVolumesFromVolumeGroupSnapshotStub = nil
	fake.restoreVolumesFromVolumeGroupSnapshotReturns = struct {
		result1 []cephfscg.RestoredPVC
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeGroupSourceHandler) RestoreVolumesFromVolumeGroupSnapshotReturnsOnCall(i int, result1 []cephfscg.RestoredPVC, result2 error) {
	fake.restoreVolumesFromVolumeGroupSnapshotMutex.Lock()
	defer fake.restoreVolumesFromVolumeGroupSnapshotMutex.Unlock()
	fake.RestoreVolumesFromVolumeGroupSnapshotStub = nil
	if fake.restoreVolumesFromVolumeGroupSnapshotReturnsOnCall == nil {
		fake.restoreVolumesFromVolumeGroupSnapshotReturnsOnCall = make(map[int]struct {
			result1 []cephfscg.RestoredPVC
			result2 error
		})
	}
	fake.restoreVolumesFromVolumeGroupSnapshotReturnsOnCall[i] = struct {
		result1 []cephfscg.RestoredPVC
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeGroupSourceHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkReplicationSourceForRestoredPVCsCompletedMutex.RLock()
	defer fake.checkReplicationSourceForRestoredPVCsCompletedMutex.RUnlock()
	fake.cleanVolumeGroupSnapshotMutex.RLock()
	defer fake.cleanVolumeGroupSnapshotMutex.RUnlock()
	fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.RLock()
	defer fake.createOrUpdateReplicationSourceForRestoredPVCsMutex.RUnlock()
	fake.createOrUpdateVolumeGroupSnapshotMutex.RLock()
	defer fake.createOrUpdateVolumeGroupSnapshotMutex.RUnlock()
	fake.restoreVolumesFromVolumeGroupSnapshotMutex.RLock()
	defer fake.restoreVolumesFromVolumeGroupSnapshotMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVolumeGroupSourceHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cephfscg.VolumeGroupSourceHandler = new(FakeVolumeGroupSourceHandler)
